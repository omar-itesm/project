function contrast_patterns = parseContrastPatternsPBC4cip(contrast_pattern_file)
% The file parses the contrast pattern file generated by PBC4cip
    contrast_patterns = {};

    [~,tactic_name,~] = fileparts(contrast_pattern_file);

    fid = fopen(contrast_pattern_file);
    try
        line = fgetl(fid);
        
        % Parse contrast patterns
        contrast_pattern_index = 1;
        while (ischar(line) && ~isempty(line))
            
            contrast_pattern      = regexp(line, ' AND ', 'split');
            last_clause           = contrast_pattern(end);
            support               = last_clause{:}(end-10:end);
            contrast_pattern{end} = last_clause{:}(1:end-11);
            
            if isempty(contrast_pattern{1})
                % This tends to happen when there is a problem with the
                % contrast pattern file. E.g. no contrasts were found.
                break;
            end
            
            contrast_pattern                                = contrastPatternArray2Struct(contrast_pattern);
%             contrast_pattern.(strcat(tactic_name, '_eq'))   = 't';
            contrast_pattern.('length')                     = contrast_pattern.('length');
            
            contrast_pattern.('support')                    = support;
            contrast_patterns{contrast_pattern_index}       = contrast_pattern;
            
            line = fgetl(fid);
            contrast_pattern_index = contrast_pattern_index + 1;
        end

        fclose(fid);
    catch e
        fclose(fid);
        disp(contrast_pattern_file);
        throw(e);
    end
end

function contrast_pattern_struct = contrastPatternArray2Struct(contrast_pattern)
    contrast_pattern_struct = struct();

    num_clauses = numel(contrast_pattern);

    for i = 1:num_clauses
       current_clause = contrast_pattern{i};
       [field, value] = createFieldFromClause(current_clause);
       
       if isfield(contrast_pattern_struct, field)
          num_same_field = countRepeatedFields(contrast_pattern_struct, field);
          field = [field(1:end-4), num2str(num_same_field), field(end-3:end)];
       end

       contrast_pattern_struct.(field) = value;
    end
    
    contrast_pattern_struct.('length') = num_clauses;
end

function [field, value] = createFieldFromClause(clause)
    relation = regexp(clause, ' <= | >= | < | > | = | != ', 'match');
    split_clause = regexp(clause, relation{:}, 'split');

    field = [split_clause{1}, '_', getRelationShortName(relation{:})];
    value = split_clause{2};
    
    % Assign the correct data type
    is_str = strcmp(value(1), "'");
    if is_str
        value = value(2:end-1);
    else
        value = str2double(value);
    end
        
    
end

function short_name = getRelationShortName(relation)
    switch(relation)
        case ' <= '
            short_name = 'lte';
        case ' >= '
            short_name = 'gte';
        case ' < '
            short_name = 'lt';
        case ' > '
            short_name = 'gt';
        case ' = '
            short_name = 'eq';
        case ' != '
            short_name = 'neq';
        otherwise
            error('Invaid relational operator');
    end

end